if (platform == ""){
cleaned_plat<-""
}else{
cleaned_plat <- paste("&platforms=",platform,sep="")
}
#Platform count
if (platform_count == ""){
cleaned_plat_count<-""
}else{
cleaned_plat_count <- paste("&platforms_count=",platform_count,sep="")
}
#Genre
if (genre == ""){
cleaned_genre<-""
}else{
cleaned_genre <- paste("&genre=",genre,sep="")
}
#Ordering
if (ordering == ""){
cleaned_order <- ""
}else if (ordering %in% c("name","released","added","created","updated","rating","metacritic","-name","-released","-added","-created","-updated","-rating","-metacritic")){
cleaned_order <- paste("&ordering=",ordering,sep="")
}else{
stop('Field must be one of the following: "name","released","added","created","updated","rating","metacritic","-name","-released","-added","-created","-updated","-rating","-metacritic"')
}
link <- paste("https://api.rawg.io/api/games?",cleaned_n,cleaned_page,cleaned_api_key,cleaned_metacritic,cleaned_date,cleaned_metacritic,cleaned_plat,cleaned_plat_count,cleaned_genre,cleaned_order,sep="")
get_link <- GET(link)
return(get_link)
}
library(docstring)
library(jsonlite)
parse_RAWG <- function(get_object){
#' @title parse the GET request from RAWG
#'
#' @description Convert the GET request from the get_game_list function into a JSON object, making the data available for extraction.
#'
#' @importFrom json fromJSON
#' @import docstring
#'
#' @param get_object (list): Object returned from the GET function
#'
#' @return Returns a JSON object containing some general summary data as well as requested data
#'
#' @examples raw_data <- parse_RAWG(test)
raw_content <- fromJSON(content(get_object,"text",encoding="UTF-8"),simplifyVector=FALSE)
#Return object
return(raw_content)
}
library(docstring)
library(jsonlite)
parse_RAWG <- function(get_object){
#' @title parse the GET request from RAWG
#'
#' @description Convert the GET request from the get_game_list function into a JSON object, making the data available for extraction.
#'
#' @importFrom json fromJSON
#' @import docstring
#'
#' @param get_object (list): Object returned from the GET function
#'
#' @return Returns a JSON object containing some general summary data as well as requested data
#'
#' @examples raw_data <- parse_RAWG(test)
raw_content <- fromJSON(content(get_object,"text",encoding="UTF-8"),simplifyVector=FALSE)
#Return object
return(raw_content)
}
library(docstring)
library(dplyr)
library(tibble)
extract_as.df_RAWG <- function(parse_object){
#' @title extract data from the RAWG JSON object
#'
#' @description Extracting the data from 'results' into a dataframe, removing certain fields such as images,screenshots, stores and tags
#'
#' @param parse_object (list): JSON object obtained from the parse_RAWG function
#'
#' @return Returns a dataframe containing the extracted data from the GET function
#'
#' @examples df <- extract_as.df_RAWG(raw_data)
results <- (parse_object$results)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- temp_df[!grepl("tags|screenshots|store|image|requirements|clip", temp_df$name),]
#Create Unique Labeling - prepping for merge
uniquify_list <- c("ratings.id","platforms.platform.id","parent_platforms.platform.id","genres.id")
stop_list <- c("ratings.percent","platforms.released_at","parent_platforms.platform.slug","genres.games_count")
ids <- ""
for (i in 1:length(temp_df$name)){
if (temp_df$name[i] %in% uniquify_list){
ids <- temp_df[i,"value"]
}else if (temp_df$name[i] %in% stop_list){
temp_df$name[i]<-paste(temp_df$name[i],ids,sep="")
ids<-""
}
temp_df$name[i]<-paste(temp_df$name[i],ids,sep="")
}
final_df<-temp_df
#For all other n-1 games
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GAME
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- temp_df[!grepl("tags|screenshots|store|image|requirements|clip", temp_df$name),]
#Create Unique Labeling - prepping for merge
ids<-"" #RESET THE LABEL AFTER EACH GAME
for (i in 1:length(temp_df$name)){
if (temp_df$name[i] %in% uniquify_list){
ids <- temp_df[i,"value"]
}else if (temp_df$name[i] %in% stop_list){
temp_df$name[i]<-paste(temp_df$name[i],ids,sep="")
ids<-""
}
temp_df$name[i]<-paste(temp_df$name[i],ids,sep="")
}
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#Cleaning up Data.frame
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
#Return object
return(final_df)
}
request<- get_game_list(start_date="2000-01-01",end_date="2020-12-31",genre="1,2,3",ordering ="-added")
parse_req <- parse_RAWG(request)
df <- extract_as.df_RAWG(parse_req)
request2 <- get_game_list()
parse_req2 <- parse_RAWG(request2)
df2 <- extract_as.df_RAWG(parse_req2)
View(parse_req)
View(parse_req)
View(parse_req2)
View(parse_req2)
View(df)
View(df)
View(df2)
View(df2)
request<- get_game_list(start_date="2000-01-01",end_date="2020-12-31",genre="1,2,3",ordering ="-added",n=4)
parse_req <- parse_RAWG(request)
df <- extract_as.df_RAWG(parse_req)
request2 <- get_game_list()
parse_req2 <- parse_RAWG(request2)
df2 <- extract_as.df_RAWG(parse_req2)
link <- GET("https://api.rawg.io/api/genres")
library(httr)
link <- GET("https://api.rawg.io/api/genres")
request_genre <- get_genre_list()
get_genre_list<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Large list containing response from RAWG query
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link)
return(get_link)
}
parse_RAWG_genre <- function(){
}
request_genre <- get_genre_list()
request_genre
raw_genre <- fromJSON(request_genre)
library(httr)
library(jsonlite)
library(dplyr)
library(tibble)
request_genre <- get_genre_list()
raw_genre <- fromJSON(request_genre)
raw_genre <- fromJSON(context(request_genre,"text",encoding="UTF-8"),simplifyVector=FALSE)
raw_genre <- fromJSON(content(request_genre,"text",encoding="UTF-8"),simplifyVector=FALSE)
raw_genre
View(raw_genre)
View(raw_genre)
raw_genre$results
test <- raw_genre$results
View(test)
View(test)
test <- data.frame(raw_genre$results)
View(test)
View(test)
test <- ,atrix(raw_genre$result
test <- matrix(raw_genre$result
View(test)
View(test)
test <- matrix(raw_genre$result)
View(test)
View(test)
raw_genre$results
unlist(raw_genre$results)
enframe(unlist(raw_genre$results))
library(httr)
library(jsonlite)
library(dplyr)
library(tibble)
request_genre <- get_genre_list()
raw_genre <- fromJSON(content(request_genre,"text",encoding="UTF-8"),simplifyVector=FALSE)
raw_genre <- parse_RAWG(request_genre)
enframe(unlist(raw_genre$results))
results <- (raw_genre$results)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- enframe(unlist(data_raw))
View(raw_data)
View(data_raw)
View(data_raw)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
data_raw <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
View(data_raw)
temp_df <- data.frame(names)
data_raw <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
View(temp_df)
View(temp_df)
raw_genre <- parse_RAWG(request_genre)
results <- (raw_genre$results)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
test <- temp_df[!grepl("image|games.|following", temp_df$name),]
View(test)
View(test)
test <- temp_df[!grepl("image|.|following", temp_df$name),]
View(test)
View(test)
temp_df <- data.frame(names)
test <- temp_df[!grepl("image|.|following", temp_df$name),]
test <- temp_df[!grepl("image|following", temp_df$name),]
View(test)
View(test)
test <- filter(test,!test$name %in% c("games.id","games.slug","games.name","games.added"))
View(test)
View(test)
View(temp_df)
View(temp_df)
#extract_as.df_RAWG <- function(parse_object){
#' @title extract data from the RAWG JSON object
#'
#' @description Extracting the data from 'results' into a dataframe, removing certain fields such as images,screenshots, stores and tags
#'
#' @param parse_object (list): JSON object obtained from the parse_RAWG function
#'
#' @return Returns a dataframe containing the extracted data from the GET function
#'
#' @examples df <- extract_as.df_RAWG(raw_data)
results <- (raw_genre$results)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
test <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
View(temp_df)
View(temp_df)
View(test)
View(test)
temp_df
t(temp_df)
(temp_df)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
temp_df
#extract_as.df_RAWG <- function(parse_object){
#' @title extract data from the RAWG JSON object
#'
#' @description Extracting the data from 'results' into a dataframe, removing certain fields such as images,screenshots, stores and tags
#'
#' @param parse_object (list): JSON object obtained from the parse_RAWG function
#'
#' @return Returns a dataframe containing the extracted data from the GET function
#'
#' @examples df <- extract_as.df_RAWG(raw_data)
results <- (raw_genre$results)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[i]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
#extract_as.df_RAWG <- function(parse_object){
#' @title extract data from the RAWG JSON object
#'
#' @description Extracting the data from 'results' into a dataframe, removing certain fields such as images,screenshots, stores and tags
#'
#' @param parse_object (list): JSON object obtained from the parse_RAWG function
#'
#' @return Returns a dataframe containing the extracted data from the GET function
#'
#' @examples df <- extract_as.df_RAWG(raw_data)
results <- (raw_genre$results)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
View(final_df)
View(final_df)
View(results)
View(results)
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
get_genre_list<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Large list containing response from RAWG query
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link)
return(get_link)
}
parse_RAWG <- function(get_object){
#' @title parse the GET request from RAWG
#'
#' @description Convert the GET request from the get_game_list function into a JSON object, making the data available for extraction.
#'
#' @importFrom json fromJSON
#' @import docstring
#'
#' @param get_object (list): Object returned from the GET function
#'
#' @return Returns a JSON object containing some general summary data as well as requested data
#'
#' @examples raw_data <- parse_RAWG(test)
raw_content <- fromJSON(content(get_object,"text",encoding="UTF-8"),simplifyVector=FALSE)
#Return object
return(raw_content)
}
extract_as.df_RAWG_genre <- function(parse_object){
#' @title extract data from the RAWG JSON object
#'
#' @description Extracting the data from 'results' into a dataframe, removing certain fields such as subset of game information, image and following
#'
#' @param parse_object (list): JSON object obtained from the parse_RAWG function
#'
#' @return Returns a dataframe containing the extracted data from the GET function
#'
#' @examples df <- extract_as.df_RAWG_genre(raw_genre)
results <- (raw_genre$results)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
return (final_df)
}
library(httr)
library(jsonlite)
library(dplyr)
library(tibble)
get_genre_list<-function(api_key=""){
#' GET request to RAWG
#'
#' Submit RAWG query and receive RAWG response for game genres
#'
#' @importFrom httr GET
#'
#' @param api_key (str): your api key (recommended - not required, default = none)
#'
#' @return Large list containing response from RAWG query
#'
#' @examples
#' test<-get_genre_list()
#Check if API Key is given
if (api_key == ""){
cleaned_api_key <- ""
} else {
cleaned_api_key <- paste("?key=",api_key,sep="")
}
link <- paste("https://api.rawg.io/api/genres",api_key,sep="")
get_link <- GET(link)
return(get_link)
}
parse_RAWG <- function(get_object){
#' @title parse the GET request from RAWG
#'
#' @description Convert the GET request from the get_game_list function into a JSON object, making the data available for extraction.
#'
#' @importFrom json fromJSON
#' @import docstring
#'
#' @param get_object (list): Object returned from the GET function
#'
#' @return Returns a JSON object containing some general summary data as well as requested data
#'
#' @examples raw_data <- parse_RAWG(test)
raw_content <- fromJSON(content(get_object,"text",encoding="UTF-8"),simplifyVector=FALSE)
#Return object
return(raw_content)
}
extract_as.df_RAWG_genre <- function(parse_object){
#' @title extract data from the RAWG JSON object
#'
#' @description Extracting the data from 'results' into a dataframe, removing certain fields such as subset of game information, image and following
#'
#' @param parse_object (list): JSON object obtained from the parse_RAWG function
#'
#' @return Returns a dataframe containing the extracted data from the GET function
#'
#' @examples df <- extract_as.df_RAWG_genre(raw_genre)
results <- (raw_genre$results)
#Initial Run
#Cleanup & Table values for A FIRST GAME
data_raw <- results[[1]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
final_df <- temp_df
for (entries in (2:length(results))){ #Do the same for all other N-1 games
#Cleanup & Table values for A SINGLE GENRE
data_raw <- results[[entries]]
names <- enframe(unlist(data_raw))
temp_df <- data.frame(names)
temp_df <- filter(temp_df,!temp_df$name %in% c("games.id","games.slug","games.name","games.added","image_background","following"))
#Prepping for merge
final_df<-full_join(final_df, temp_df, by = "name") #Joining by 'name' column
}
final_df<-t(final_df)
colnames(final_df) <- final_df[1,]
final_df<-final_df[-1,]
rownames(final_df)<-NULL
return (final_df)
}
library(httr)
library(jsonlite)
library(dplyr)
library(tibble)
request_genre <- get_genre_list()
raw_genre <- parse_RAWG(request_genre)
df <- extract_as.df_RAWG_genre(raw_genre)
View(df)
View(df)
View(get_genre_list)
View(get_genre_list)
